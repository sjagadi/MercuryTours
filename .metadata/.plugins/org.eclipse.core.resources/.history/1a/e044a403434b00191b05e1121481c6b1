package com.mercurytours.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.testng.Assert;

import com.mercurytours.base.BaseTest;
import com.mercurytours.helpers.ProjectHelpers;

public class FlightsPage extends BaseTest
{
	@FindBy(linkText = "Flights")
	private WebElement flightsLink;

	@FindBy(xpath = "//input[@value='roundtrip']")
	private WebElement roundTripRadioButton;
	
	@FindBy(xpath = "//input[@value='oneway']")
	private WebElement oneWayTripRadioButton;
	
	@FindBy(name = "passCount")
	private WebElement passengersDropDown;
	
	@FindBy(name = "fromPort")
	private WebElement departingFromDropDown;
	
	@FindBy(name = "toPort")
	private WebElement arrivingInDropDown;
	
	@FindBy(name = "fromMonth")
	private WebElement departingOnMonthDropDown;

	@FindBy(name = "fromDay")
	private WebElement departingOnDateDropDown;
	
	@FindBy(name = "toMonth")
	private WebElement returnMonthDropDown;

	@FindBy(name = "toDay")
	private WebElement returnDateDropDown;
	
	@FindBy(name = "servClass")
	private WebElement serviceClassRadioButton;
	
	@FindBy(name = "airline")
	private WebElement airlineDropDown;
	
	@FindBy(name = "findFlights")
	private WebElement continueButton;
	
	@FindBy(name = "reserveFlights")
	private WebElement continueToBookButton;
	
	@FindBy(name = "passFirst0")
	private WebElement firstNameTxtBox;
	
	@FindBy(name = "passLast0")
	private WebElement lastNameTxtBox;
	
	@FindBy(name = "pass.0.meal")
	private WebElement mealDropDown;
	
	@FindBy(name = "creditCard")
	private WebElement cardTypeDropDown;
	
	@FindBy(name = "creditnumber")
	private WebElement cardNumberTxtBox;
	
	@FindBy(name = "cc_exp_dt_mn")
	private WebElement cardExpiryMonthDropDown;
	
	@FindBy(name = "cc_exp_dt_yr")
	private WebElement cardExpiryYearDropDown;
	
	@FindBy(name = "cc_frst_name")
	private WebElement cardHolderFirstNameTxtBox;
	
	@FindBy(name = "cc_last_name")
	private WebElement cardHolderLastNameTxtBox;
	
	@FindBy(name = "billAddress1")
	private WebElement billingAddressTxtBox;
	
	@FindBy(name = "billCity")
	private WebElement billingCityTxtBox;
	
	@FindBy(name = "billState")
	private WebElement billingStateTxtBox;
	
	@FindBy(name = "billZip")
	private WebElement billingPostalCodeTxtBox;
	
	@FindBy(name = "billCountry")
	private WebElement billingCountryDropDown;
	
	@FindBy(xpath = "//*[contains(text(), 'Same as Billing Address')]/../input")
	private WebElement sameAsBillingAddress;
	
	@FindBy(name = "buyFlights")
	private WebElement securePurchaseButton;
	
	@FindBy(xpath = "//img[contains(@src, 'confirmation')]/../../..")
	private WebElement confirmationArea;
	
	
	public FlightsPage()
	{
//		AjaxElementLocatorFactory factory = new AjaxElementLocatorFactory(driver, 10);
		PageFactory.initElements(driver, this);
	}
	
	String sheetName = "PassengerDetails";
	
	public void oneWayTripWithEconomyClass()
	{
		flightsLink.click();
		Assert.assertEquals(driver.getTitle(), "Find a Flight: Mercury Tours:");
		ProjectHelpers.selectRadioButton(oneWayTripRadioButton);
		ProjectHelpers.selectFromDropDown(passengersDropDown, ProjectHelpers.readExcelData(sheetName, "noOfPassengers"));
		selectDate(departingOnMonthDropDown, ProjectHelpers.readExcelData(sheetName, "depMonth"), departingOnDateDropDown, ProjectHelpers.readExcelData(sheetName, "depDate"));
		selectFromAndToPlaces(ProjectHelpers.readExcelData(sheetName, "fromPlace"), ProjectHelpers.readExcelData(sheetName, "toPlace"));
		ProjectHelpers.selectRadioButton(serviceClassRadioButton);
		continueButton.click();
		Assert.assertEquals(driver.getTitle(), "Select a Flight: Mercury Tours");
		validate_From_ToFlight_Date();
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect1"));
		fillPassengerDetails(ProjectHelpers.readExcelData(sheetName, "firstName"), ProjectHelpers.readExcelData(sheetName, "lastName"), 
				ProjectHelpers.readExcelData(sheetName, "meal"), ProjectHelpers.readExcelData(sheetName, "cardType"), ProjectHelpers.readExcelData(sheetName, "cardNumber"), 
				ProjectHelpers.readExcelData(sheetName, "expMonth"), ProjectHelpers.readExcelData(sheetName, "expYear"), ProjectHelpers.readExcelData(sheetName, "address"),
				ProjectHelpers.readExcelData(sheetName, "city"), ProjectHelpers.readExcelData(sheetName, "state"), ProjectHelpers.readExcelData(sheetName, "postalCode"),
				ProjectHelpers.readExcelData(sheetName, "country"));
	}
	
	public void oneWayTripWithAirlinePreference()
	{
		flightsLink.click();
		Assert.assertEquals(driver.getTitle(), "Find a Flight: Mercury Tours:");
		ProjectHelpers.selectRadioButton(oneWayTripRadioButton);
		ProjectHelpers.selectFromDropDown(passengersDropDown, ProjectHelpers.readExcelData(sheetName, "noOfPassengers"));
		selectDate(departingOnMonthDropDown, ProjectHelpers.readExcelData(sheetName, "depMonth"), departingOnDateDropDown, ProjectHelpers.readExcelData(sheetName, "depDate"));
		selectFromAndToPlaces(ProjectHelpers.readExcelData(sheetName, "fromPlace"), ProjectHelpers.readExcelData(sheetName, "toPlace"));
		ProjectHelpers.selectRadioButton(serviceClassRadioButton);
		ProjectHelpers.selectFromDropDown(airlineDropDown, ProjectHelpers.readExcelData(sheetName, "airlinePreference"));
		continueButton.click();
		Assert.assertEquals(driver.getTitle(), "Select a Flight: Mercury Tours");
		validate_From_ToFlight_Date();
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect1"));
		fillPassengerDetails(ProjectHelpers.readExcelData(sheetName, "firstName"), ProjectHelpers.readExcelData(sheetName, "lastName"), 
				ProjectHelpers.readExcelData(sheetName, "meal"), ProjectHelpers.readExcelData(sheetName, "cardType"), ProjectHelpers.readExcelData(sheetName, "cardNumber"), 
				ProjectHelpers.readExcelData(sheetName, "expMonth"), ProjectHelpers.readExcelData(sheetName, "expYear"), ProjectHelpers.readExcelData(sheetName, "address"),
				ProjectHelpers.readExcelData(sheetName, "city"), ProjectHelpers.readExcelData(sheetName, "state"), ProjectHelpers.readExcelData(sheetName, "postalCode"),
				ProjectHelpers.readExcelData(sheetName, "country"));
	}
	
	public void roundTripWithEconomyClass()
	{
		flightsLink.click();
		Assert.assertEquals(driver.getTitle(), "Find a Flight: Mercury Tours:");
		ProjectHelpers.selectRadioButton(roundTripRadioButton);
		ProjectHelpers.selectFromDropDown(passengersDropDown, ProjectHelpers.readExcelData(sheetName, "noOfPassengers"));
		selectFromAndToPlaces(ProjectHelpers.readExcelData(sheetName, "fromPlace"), ProjectHelpers.readExcelData(sheetName, "toPlace"));
		selectDate(departingOnMonthDropDown, ProjectHelpers.readExcelData(sheetName, "depMonth"), departingOnDateDropDown, ProjectHelpers.readExcelData(sheetName, "depDate"));
		selectDate(returnMonthDropDown, ProjectHelpers.readExcelData(sheetName, "onwardMonth"), returnDateDropDown, ProjectHelpers.readExcelData(sheetName, "onwardDate"));
		ProjectHelpers.selectRadioButton(serviceClassRadioButton);
		continueButton.click();
		Assert.assertEquals(driver.getTitle(), "Select a Flight: Mercury Tours");
		validate_From_ToFlight_Date();
		validate_To_FromFlight_Date();
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect1"));
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect2"));
		fillPassengerDetails(ProjectHelpers.readExcelData(sheetName, "firstName"), ProjectHelpers.readExcelData(sheetName, "lastName"), 
				ProjectHelpers.readExcelData(sheetName, "meal"), ProjectHelpers.readExcelData(sheetName, "cardType"), ProjectHelpers.readExcelData(sheetName, "cardNumber"), 
				ProjectHelpers.readExcelData(sheetName, "expMonth"), ProjectHelpers.readExcelData(sheetName, "expYear"), ProjectHelpers.readExcelData(sheetName, "address"),
				ProjectHelpers.readExcelData(sheetName, "city"), ProjectHelpers.readExcelData(sheetName, "state"), ProjectHelpers.readExcelData(sheetName, "postalCode"),
				ProjectHelpers.readExcelData(sheetName, "country"));
		flightBookingConfirmationValidation();
	}
	
	public void roundTripWithAirlinePreference()
	{
		flightsLink.click();
		Assert.assertEquals(driver.getTitle(), "Find a Flight: Mercury Tours:");
		ProjectHelpers.selectRadioButton(roundTripRadioButton);
		ProjectHelpers.selectFromDropDown(passengersDropDown, ProjectHelpers.readExcelData(sheetName, "noOfPassengers"));
		selectFromAndToPlaces(ProjectHelpers.readExcelData(sheetName, "fromPlace"), ProjectHelpers.readExcelData(sheetName, "toPlace"));
		selectDate(departingOnMonthDropDown, ProjectHelpers.readExcelData(sheetName, "depMonth"), departingOnDateDropDown, ProjectHelpers.readExcelData(sheetName, "depDate"));
		selectDate(returnMonthDropDown, ProjectHelpers.readExcelData(sheetName, "onwardMonth"), returnDateDropDown, ProjectHelpers.readExcelData(sheetName, "onwardDate"));
		ProjectHelpers.selectRadioButton(serviceClassRadioButton);
		ProjectHelpers.selectFromDropDown(airlineDropDown, ProjectHelpers.readExcelData(sheetName, "airlinePreference"));
		continueButton.click();
		Assert.assertEquals(driver.getTitle(), "Select a Flight: Mercury Tours");
		validate_From_ToFlight_Date();
		validate_To_FromFlight_Date();
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect1"));
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect2"));
		fillPassengerDetails(ProjectHelpers.readExcelData(sheetName, "firstName"), ProjectHelpers.readExcelData(sheetName, "lastName"), 
				ProjectHelpers.readExcelData(sheetName, "meal"), ProjectHelpers.readExcelData(sheetName, "cardType"), ProjectHelpers.readExcelData(sheetName, "cardNumber"), 
				ProjectHelpers.readExcelData(sheetName, "expMonth"), ProjectHelpers.readExcelData(sheetName, "expYear"), ProjectHelpers.readExcelData(sheetName, "address"),
				ProjectHelpers.readExcelData(sheetName, "city"), ProjectHelpers.readExcelData(sheetName, "state"), ProjectHelpers.readExcelData(sheetName, "postalCode"),
				ProjectHelpers.readExcelData(sheetName, "country"));
		flightBookingConfirmationValidation();
	}
	
	public void selectDate(WebElement monthDropDown, String month, WebElement dateDropDown, String date)
	{
		ProjectHelpers.selectFromDropDown(monthDropDown, month);
		ProjectHelpers.selectFromDropDown(dateDropDown, date);
	}
	
	public void selectFromAndToPlaces(String source, String destination)
	{
		ProjectHelpers.selectFromDropDown(departingFromDropDown, source);
		ProjectHelpers.selectFromDropDown(arrivingInDropDown, destination);
	}
	
	public void validate_From_ToFlight_Date()
	{
		WebElement fromToFlight = driver
				.findElement(By.xpath("//font[contains(text(), '" + ProjectHelpers.readExcelData(sheetName, "fromPlace")
						+ " to " + ProjectHelpers.readExcelData(sheetName, "toPlace") + "')]"));
		Assert.assertTrue(ProjectHelpers.isElementPresent(fromToFlight));
		String depDate = ProjectHelpers.getDate(ProjectHelpers.readExcelData(sheetName, "depDate"), ProjectHelpers.readExcelData(sheetName, "depMonth"));
		WebElement depDateLocator = driver.findElement(By.xpath("//font[contains(text(), '" + depDate + "')]"));
		Assert.assertTrue(ProjectHelpers.isElementPresent(depDateLocator));
		WebElement toFromFlight = driver
				.findElement(By.xpath("//font[contains(text(), '" + ProjectHelpers.readExcelData(sheetName, "toPlace")
				+ " to " + ProjectHelpers.readExcelData(sheetName, "fromPlace") + "')]"));
	}
	public void validate_To_FromFlight_Date()
	{
		WebElement fromToFlight = driver
				.findElement(By.xpath("//font[contains(text(), '" + ProjectHelpers.readExcelData(sheetName, "toPlace")
						+ " to " + ProjectHelpers.readExcelData(sheetName, "fromPlace") + "')]"));
		Assert.assertTrue(ProjectHelpers.isElementPresent(fromToFlight));
		String onwardDate = ProjectHelpers.getDate(ProjectHelpers.readExcelData(sheetName, "onwardDate"), ProjectHelpers.readExcelData(sheetName, "onwardMonth"));
		WebElement onwardDateLocator = driver.findElement(By.xpath("//font[contains(text(), '" + onwardDate + "')]"));
		Assert.assertTrue(ProjectHelpers.isElementPresent(onwardDateLocator));
	}
	
	public void flightBookingConfirmationValidation()
	{
		String confirmation = confirmationArea.getAttribute("textContent");
		
		String succMsg1 = "itinerary has been booked!";
		String succMsg2 = "Please print a copy of this screen for your records.";
		String departing = ProjectHelpers.readExcelData(sheetName, "fromPlace") + " to " + ProjectHelpers.readExcelData(sheetName, "toPlace");
		String depDate = ProjectHelpers.getDate(ProjectHelpers.readExcelData(sheetName, "depDate"), ProjectHelpers.readExcelData(sheetName, "depMonth"));
		String onwardFlight = ProjectHelpers.readExcelData(sheetName, "toPlace") + " to " + ProjectHelpers.readExcelData(sheetName, "fromPlace");
		String onwardDate = ProjectHelpers.getDate(ProjectHelpers.readExcelData(sheetName, "onwardDate"), ProjectHelpers.readExcelData(sheetName, "onwardMonth"));
		String depFlightName = ProjectHelpers.readExcelData(sheetName, "flightToSelect1");
		String onwardFlightName = ProjectHelpers.readExcelData(sheetName, "flightToSelect1");
		if (confirmation.contains(succMsg1) && confirmation.contains(succMsg2) && confirmation.contains(departing)
				&& confirmation.contains(depDate) && confirmation.contains(onwardFlight)
				&& confirmation.contains(onwardDate) && confirmation.contains(depFlightName) && confirmation.contains(onwardFlightName))
		{
			Assert.assertTrue(true);
		} else
		{
			Assert.assertTrue(false);
		}
	}
	
	public void fillPassengerDetails(String firstName, String lastName, String mealType, String cardType, String cardNumber, String expMonth, String expYear, 
			String address, String city, String state, String postalCode, String country)
	{
		continueToBookButton.click();
		Assert.assertEquals(driver.getTitle(), "Book a Flight: Mercury Tours");
		ProjectHelpers.enterText(firstNameTxtBox, firstName);
		ProjectHelpers.enterText(lastNameTxtBox, lastName);
		ProjectHelpers.selectFromDropDown(mealDropDown, mealType);
		ProjectHelpers.selectFromDropDown(cardTypeDropDown, cardType);
		ProjectHelpers.enterText(cardNumberTxtBox, cardNumber);
		ProjectHelpers.selectFromDropDown(cardExpiryMonthDropDown, expMonth);
		ProjectHelpers.selectFromDropDown(cardExpiryYearDropDown, expYear);
		ProjectHelpers.enterText(cardHolderFirstNameTxtBox, firstName);
		ProjectHelpers.enterText(cardHolderLastNameTxtBox, lastName);
		ProjectHelpers.enterText(billingAddressTxtBox, address);
		ProjectHelpers.enterText(billingCityTxtBox, city);
		ProjectHelpers.enterText(billingStateTxtBox, state);
		ProjectHelpers.enterText(billingPostalCodeTxtBox, postalCode);
		ProjectHelpers.selectFromDropDown(billingCountryDropDown, country);
		ProjectHelpers.clickOn(sameAsBillingAddress);
		ProjectHelpers.clickOn(securePurchaseButton);
	}
}
