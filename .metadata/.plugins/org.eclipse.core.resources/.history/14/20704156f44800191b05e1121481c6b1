package com.mercurytours.pages;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.testng.Assert;

import com.mercurytours.base.BaseTest;
import com.mercurytours.helpers.ProjectHelpers;

public class FlightsPage extends BaseTest
{
	@FindBy(linkText = "Flights")
	private WebElement flightsLink;

	@FindBy(xpath = "//input[@value='roundtrip']")
	private WebElement roundTripRadioButton;
	
	@FindBy(xpath = "//input[@value='oneway']")
	private WebElement oneWayTripRadioButton;
	
	@FindBy(name = "passCount")
	private WebElement passengersDropDown;
	
	@FindBy(name = "fromPort")
	private WebElement departingFromDropDown;
	
	@FindBy(name = "toPort")
	private WebElement arrivingInDropDown;
	
	@FindBy(name = "fromMonth")
	private WebElement departingOnMonthDropDown;

	@FindBy(name = "fromDay")
	private WebElement departingOnDateDropDown;
	
	@FindBy(name = "servClass")
	private WebElement serviceClassRadioButton;
	
	@FindBy(name = "airline")
	private WebElement airlineDropDown;
	
	@FindBy(name = "findFlights")
	private WebElement continueButton;
	
	@FindBy(name = "reserveFlights")
	private WebElement continueToBookButton;
	
	@FindBy(name = "passFirst0")
	private WebElement firstNameTxtBox;
	
	@FindBy(name = "passLast0")
	private WebElement lastNameTxtBox;
	
	@FindBy(name = "pass.0.meal")
	private WebElement mealDropDown;
	
	@FindBy(name = "creditCard")
	private WebElement cardTypeDropDown;
	
	@FindBy(name = "creditnumber")
	private WebElement cardNumberTxtBox;
	
	@FindBy(name = "cc_exp_dt_mn")
	private WebElement cardExpiryMonthDropDown;
	
	@FindBy(name = "cc_exp_dt_yr")
	private WebElement cardExpiryYearDropDown;
	
	@FindBy(name = "cc_frst_name")
	private WebElement cardHolderFirstNameTxtBox;
	
	@FindBy(name = "cc_last_name")
	private WebElement cardHolderLastNameTxtBox;
	
	@FindBy(name = "billAddress1")
	private WebElement billingAddressTxtBox;
	
	@FindBy(name = "billCity")
	private WebElement billingCityTxtBox;
	
	@FindBy(name = "billState")
	private WebElement billingStateTxtBox;
	
	@FindBy(name = "billZip")
	private WebElement billingPostalCodeTxtBox;
	
	@FindBy(name = "billCountry")
	private WebElement billingCountryDropDown;
	
	@FindBy(xpath = "//*[contains(text(), 'Same as Billing Address')]/../input")
	private WebElement sameAsBillingAddress;
	
	@FindBy(name = "buyFlights")
	private WebElement securePurchaseButton;
	
	public FlightsPage()
	{
		AjaxElementLocatorFactory factory = new AjaxElementLocatorFactory(driver, 10);
		PageFactory.initElements(factory, this);
	}
	
	String sheetName = "PassengerDetails";
	
	public void oneWayTripWithEconomyClass()
	{
		flightsLink.click();
		Assert.assertEquals(driver.getTitle(), "Find a Flight: Mercury Tours:");
		ProjectHelpers.selectRadioButton(oneWayTripRadioButton);
		ProjectHelpers.selectFromDropDown(passengersDropDown, ProjectHelpers.readExcelData(sheetName, "noOfPassengers"));
		selectDate(ProjectHelpers.readExcelData(sheetName, "month"), ProjectHelpers.readExcelData(sheetName, "date"));
		selectFromAndToPlaces(ProjectHelpers.readExcelData(sheetName, "fromPlace"), ProjectHelpers.readExcelData(sheetName, "fromPlace"));
		ProjectHelpers.selectRadioButton(serviceClassRadioButton);
		continueButton.click();
		Assert.assertEquals(driver.getTitle(), "Select a Flight: Mercury Tours");
		ProjectHelpers.selectFlight(ProjectHelpers.readExcelData(sheetName, "flightToSelect1"));
		fillPassengerDetails(ProjectHelpers.readExcelData(sheetName, "firstName"), ProjectHelpers.readExcelData(sheetName, "lastName"), 
				ProjectHelpers.readExcelData(sheetName, "meal"), ProjectHelpers.readExcelData(sheetName, "cardType"), ProjectHelpers.readExcelData(sheetName, "cardNumber"), 
				ProjectHelpers.readExcelData(sheetName, "expMonth"), ProjectHelpers.readExcelData(sheetName, "expYear"), ProjectHelpers.readExcelData(sheetName, "address"),
				ProjectHelpers.readExcelData(sheetName, "city"), ProjectHelpers.readExcelData(sheetName, "state"), ProjectHelpers.readExcelData(sheetName, "postalCode"),
				ProjectHelpers.readExcelData(sheetName, "country"));
	}
	
	public void roundTripWithEconomyClass()
	{
		flightsLink.click();
		Assert.assertEquals(driver.getTitle(), "Find a Flight: Mercury Tours:");
	}
	
	public void selectDate(String month, String date)
	{
		ProjectHelpers.selectFromDropDown(departingOnMonthDropDown, month);
		ProjectHelpers.selectFromDropDown(departingOnDateDropDown, date);
	}
	
	public void selectFromAndToPlaces(String source, String destination)
	{
		ProjectHelpers.selectFromDropDown(departingFromDropDown, source);
		ProjectHelpers.selectFromDropDown(arrivingInDropDown, destination);
	}
	
	public void fillPassengerDetails(String firstName, String lastName, String mealType, String cardType, String cardNumber, String expMonth, String expYear, 
			String address, String city, String state, String postalCode, String country)
	{
		continueToBookButton.click();
		Assert.assertEquals(driver.getTitle(), "Book a Flight: Mercury Tours");
//		String price = ProjectHelpers.getPrice(ProjectHelpers.readExcelData("Passenger&FlightDetails", "flightToSelect1"));
//		System.out.println(price);
		ProjectHelpers.enterText(firstNameTxtBox, firstName);
		ProjectHelpers.enterText(lastNameTxtBox, lastName);
		ProjectHelpers.selectFromDropDown(mealDropDown, mealType);
		ProjectHelpers.selectFromDropDown(cardTypeDropDown, cardType);
		ProjectHelpers.enterText(cardNumberTxtBox, cardNumber);
		ProjectHelpers.selectFromDropDown(cardExpiryMonthDropDown, expMonth);
		ProjectHelpers.selectFromDropDown(cardExpiryYearDropDown, expYear);
		ProjectHelpers.enterText(cardHolderFirstNameTxtBox, firstName);
		ProjectHelpers.enterText(cardHolderLastNameTxtBox, lastName);
		ProjectHelpers.enterText(billingAddressTxtBox, address);
		ProjectHelpers.enterText(billingCityTxtBox, city);
		ProjectHelpers.enterText(billingStateTxtBox, state);
		ProjectHelpers.enterText(billingPostalCodeTxtBox, postalCode);
		ProjectHelpers.selectFromDropDown(billingCountryDropDown, country);
		try
		{
			Thread.sleep(5000);
		} catch (Exception e)
		{
			// TODO: handle exception
		}
		sameAsBillingAddress.click();
		securePurchaseButton.click();
	}
}
